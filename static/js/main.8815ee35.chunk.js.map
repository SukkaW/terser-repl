{"version":3,"sources":["CodeMirrorPanel.module.css","lib/terser-options.js","Repl.module.css","CodeMirror.js","CodeMirrorPanel.js","lib/helpers.js","Repl.js","serviceWorker.js","index.js"],"names":["module","exports","container","sharedBox","codeMirror","info","error","fileSize","__webpack_require__","d","__webpack_exports__","evalOptions","options","opts","eval","concat","wrapperPanels","panels","verticalSplit","codeMirrorPanel","codeMirrorPanelOptions","codeMirrorPanelInput","require","DEFAULT_CODE_MIRROR_OPTIONS","autoCloseBrackets","keyMap","lineNumbers","matchBrackets","mode","showCursorWhenSelecting","styleActiveLine","tabWidth","CodeMirrorReact","state","isFocused","_codeMirror","_textAreaRef","_onChange","doc","change","origin","_this","props","onChange","getValue","_setTextAreaRef","ref","arguments","length","undefined","this","CodeMirror","fromTextArea","Object","objectSpread","setOption","theme","on","setValue","value","toTextArea","nextProps","preserveScrollPosition","prevScrollPosition","getScrollInfo","scrollTo","left","top","optionName","hasOwnProperty","_updateOption","focus","react_default","a","createElement","autoComplete","autoFocus","defaultValue","placeholder","newValue","getOption","Component","defaultProps","CodeMirrorPanel","className","code","errorMessage","containerClass","cx","styles","infoClass","errorClass","readOnly","getCodeSizeInBytes","Blob","type","size","DEBOUNCE_DELAY","Repl","optionsCode","terserOptions","minified","rawSize","minifiedSize","lineWrapping","_updateCode","setState","_minifyToState","_updateTerserOptions","parsedOptions","optionsErrorMessage","e","message","_minify","debounce","_persistState","setStateCallback","terserOpts","cloneDeep","result","terser","minify","src_CodeMirrorPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_Repl","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8815ee35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CodeMirrorPanel_container__3QpkM\",\"sharedBox\":\"CodeMirrorPanel_sharedBox__PB0Sj\",\"codeMirror\":\"CodeMirrorPanel_codeMirror__vmJpw\",\"info\":\"CodeMirrorPanel_info__5WIzp\",\"error\":\"CodeMirrorPanel_error__2t1ti\",\"fileSize\":\"CodeMirrorPanel_fileSize__h3Hkc\"};","const options = `// edit terser options\n{\n  compress: {\n    arguments: false,\n    arrows: true,\n    booleans: true,\n    booleans_as_integers: false,\n    collapse_vars: true,\n    comparisons: true,\n    computed_props: true,\n    conditionals: true,\n    dead_code: true,\n    defaults: true,\n    directives: true,\n    drop_console: false,\n    drop_debugger: true,\n    ecma: 5,\n    evaluate: true,\n    expression: false,\n    global_defs: false,\n    hoist_funs: false,\n    hoist_props: true,\n    hoist_vars: false,\n    ie8: false,\n    if_return: true,\n    inline: 3,\n    join_vars: true,\n    keep_classnames: false,\n    keep_fargs: true,\n    keep_fnames: false,\n    keep_infinity: false,\n    loops: true,\n    module: false,\n    negate_iife: true,\n    passes: 1,\n    properties: true,\n    pure_getters: 'strict',\n    pure_funcs: null,\n    reduce_funcs: true,\n    reduce_vars: true,\n    sequences: true,\n    side_effects: true,\n    switches: true,\n    top_retain: null,\n    toplevel: false,\n    typeofs: true,\n    unsafe: false,\n    unsafe_arrows: false,\n    unsafe_comps: false,\n    unsafe_Function: false,\n    unsafe_math: false,\n    unsafe_methods: false,\n    unsafe_proto: false,\n    unsafe_regexp: false,\n    unsafe_undefined: false,\n    unused: true,\n    warnings: false\n  },\n  enclose: false,\n  ie8: false,\n  keep_classnames: false,\n  keep_fnames: false,\n  mangle: {\n    cache: null,\n    eval: false,\n    ie8: false,\n    keep_classnames: false,\n    keep_fnames: false,\n    module: false,\n    properties: false,\n    reserved: ['arguments'],\n    safari10: false,\n    toplevel: false\n  },\n  module: false,\n  nameCache: null,\n  output: {\n    ascii_only: false,\n    beautify: false,\n    braces: false,\n    comments: false,\n    ecma: 5,\n    ie8: false,\n    indent_level: 4,\n    indent_start: 0,\n    inline_script: true,\n    keep_quoted_props: false,\n    max_line_len: false,\n    preamble: null,\n    quote_keys: false,\n    quote_style: 0,\n    safari10: false,\n    semicolons: true,\n    shebang: true,\n    shorthand: false,\n    source_map: null,\n    webkit: false,\n    width: 80,\n    wrap_iife: false\n  },\n  parse: {\n    toplevel: {},\n    filename: '0',\n    bare_returns: false,\n    ecma: 8,\n    expression: false,\n    html5_comments: true,\n    module: false,\n    shebang: true,\n    strict: false\n  },\n  rename: {\n    cache: null,\n    eval: false,\n    ie8: false,\n    keep_classnames: false,\n    keep_fnames: false,\n    module: false,\n    properties: false,\n    reserved: ['arguments'],\n    safari10: false,\n    toplevel: false\n  },\n  safari10: false,\n  sourceMap: false,\n  timings: false,\n  toplevel: false,\n  warnings: false,\n  wrap: false\n}`;\n\n/* eslint-disable-next-line no-eval */\nexport const evalOptions = (opts) => eval(`(${opts||options})`)\n\nexport default options;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Repl_container__SliIm\",\"wrapperPanels\":\"Repl_wrapperPanels__M5Uvu\",\"panels\":\"Repl_panels__ZhGDg\",\"verticalSplit\":\"Repl_verticalSplit__2Vo9P\",\"codeMirrorPanel\":\"Repl_codeMirrorPanel__3kO2i\",\"codeMirrorPanelOptions\":\"Repl_codeMirrorPanelOptions__haEox\",\"codeMirrorPanelInput\":\"Repl_codeMirrorPanelInput__2EBx4\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CodeMirror from 'codemirror';\n\nrequire('codemirror/lib/codemirror.css');\nrequire('./paraiso-dark.css');\nrequire('./paraiso-light.css');\nrequire('codemirror/mode/xml/xml');\nrequire('codemirror/mode/javascript/javascript');\nrequire('codemirror/keymap/sublime');\n\nconst DEFAULT_CODE_MIRROR_OPTIONS = {\n  autoCloseBrackets: true,\n  keyMap: 'sublime',\n  lineNumbers: true,\n  matchBrackets: true,\n  mode: 'javascript',\n  showCursorWhenSelecting: true,\n  styleActiveLine: true,\n  tabWidth: 2\n};\n\nclass CodeMirrorReact extends Component {\n  static propTypes = {\n    autoFocus: PropTypes.bool,\n    preserveScrollPosition: PropTypes.bool,\n    options: PropTypes.object,\n    placeholder: PropTypes.string,\n    value: PropTypes.string,\n    theme: PropTypes.string\n  };\n\n  static defaultProps = {\n    autoFocus: false,\n    preserveScrollPosition: false,\n    onChange: null,\n    options: {},\n    placeholder: null,\n    value: null,\n    theme: 'default'\n  };\n\n  state = {\n    isFocused: false\n  };\n\n  _codeMirror = null;\n  _textAreaRef = null;\n\n  componentDidMount() {\n    this._codeMirror = CodeMirror.fromTextArea(this._textAreaRef, {\n      ...DEFAULT_CODE_MIRROR_OPTIONS,\n      ...this.props.options\n    });\n\n    this._codeMirror.setOption('theme', this.props.theme)\n    this._codeMirror.on('change', this._onChange);\n    this._codeMirror.setValue(this.props.value || '');\n  }\n\n  // TODO: refactor this with the new lyfecycle methods\n  UNSAFE_componentWillMount() {\n    if (this._codeMirror) {\n      this._codeMirror.toTextArea();\n    }\n  }\n\n  // TODO: refactor this with the new lyfecycle methods\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      nextProps.value &&\n      nextProps.value !== this.props.value &&\n      this._codeMirror.getValue() !== nextProps.value\n    ) {\n      if (nextProps.preserveScrollPosition) {\n        const prevScrollPosition = this._codeMirror.getScrollInfo();\n\n        this._codeMirror.setValue(nextProps.value);\n        this._codeMirror.scrollTo(\n          prevScrollPosition.left,\n          prevScrollPosition.top\n        );\n      } else {\n        this._codeMirror.setValue(nextProps.value);\n      }\n    } else if (!nextProps.value) {\n      this._codeMirror.setValue('');\n    }\n\n    for (const optionName in nextProps.options) {\n      if (nextProps.options.hasOwnProperty(optionName)) {\n        this._updateOption(optionName, nextProps.options[optionName]);\n      }\n    }\n  }\n\n  focus() {\n    this._codeMirror && this._codeMirror.focus();\n  }\n\n  render() {\n    return (\n      <textarea\n        autoComplete=\"off\"\n        autoFocus={this.props.autoFocus}\n        defaultValue={this.props.value}\n        ref={this._setTextAreaRef}\n        placeholder={this.props.placeholder}\n      />\n    );\n  }\n\n  _updateOption(optionName, newValue) {\n    const oldValue = this._codeMirror.getOption(optionName);\n\n    if (oldValue !== newValue) {\n      this._codeMirror.setOption(optionName, newValue);\n    }\n  }\n\n  _onChange = (doc, change) => {\n    if (change.origin !== 'setValue') {\n      this.props.onChange(doc.getValue());\n    }\n  };\n\n  _setTextAreaRef = (ref = null) => {\n    this._textAreaRef = ref;\n  };\n}\n\nexport default CodeMirrorReact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport CodeMirror from './CodeMirror';\n\nimport styles from './CodeMirrorPanel.module.css';\n\nconst CodeMirrorPanel = props => {\n  const {\n    className,\n    onChange,\n    options,\n    placeholder,\n    code,\n    fileSize,\n    info,\n    errorMessage,\n    theme\n  } = props;\n\n  const containerClass = cx(styles.container, className);\n  const infoClass = cx(styles.info, styles.sharedBox);\n  const errorClass = cx(styles.error, styles.sharedBox);\n\n  return (\n    <div className={containerClass}>\n      <div className={styles.codeMirror}>\n        <CodeMirror\n          onChange={onChange}\n          options={{\n            ...options,\n            readOnly: onChange == null\n          }}\n          placeholder={placeholder}\n          preserveScrollPosition={onChange == null}\n          value={code}\n          theme={theme}\n        />\n        {options.fileSize && <div className={styles.fileSize}>{fileSize} bytes</div>}\n      </div>\n      {info && <pre className={infoClass}>{info}</pre>}\n      {errorMessage && <pre className={errorClass}>{errorMessage}</pre>}\n    </div>\n  );\n};\n\nCodeMirrorPanel.propTypes = {\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n  options: PropTypes.object,\n  placeholder: PropTypes.string,\n  code: PropTypes.string,\n  fileSize: PropTypes.number\n};\n\nCodeMirrorPanel.defaultProps = {\n  className: null,\n  onChange: null,\n  options: {},\n  placeholder: null,\n  code: null,\n  fileSize: null\n};\n\nexport default CodeMirrorPanel;\n","export const getCodeSizeInBytes = code => {\n  return new Blob([code], { type: 'text/plain' }).size;\n};\n","import React, { Component } from 'react';\nimport debounce from 'lodash.debounce';\nimport terser from 'terser';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport CodeMirrorPanel from './CodeMirrorPanel';\nimport { getCodeSizeInBytes } from './lib/helpers';\nimport terserOptions, { evalOptions } from './lib/terser-options';\n\nimport styles from './Repl.module.css';\n\nconst DEBOUNCE_DELAY = 500;\n\nclass Repl extends Component {\n  state = {\n    optionsCode: terserOptions,\n    code: '// write or paste code here',\n    minified: \"// terser's ouput will be shown here\",\n    terserOptions: evalOptions(),\n    rawSize: 0,\n    minifiedSize: 0\n  };\n\n  options = {\n    lineWrapping: true,\n    fileSize: true\n  };\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <div className={styles.wrapperPanels}>\n          <div className={styles.panels}>\n            <div className={styles.verticalSplit}>\n              <CodeMirrorPanel\n                className={styles.codeMirrorPanelOptions}\n                code={this.state.optionsCode}\n                onChange={this._updateTerserOptions}\n                options={{ lineWrapping: true }}\n                theme='paraiso-light'\n                errorMessage={this.state.optionsErrorMessage}\n                placeholder=\"Edit terser config here\"\n              />\n              <CodeMirrorPanel\n                className={styles.codeMirrorPanelInput}\n                code={this.state.code}\n                onChange={this._updateCode}\n                options={this.options}\n                fileSize={this.state.rawSize}\n                theme='paraiso-light'\n                errorMessage={this.state.errorMessage}\n                placeholder=\"Write or paste code here\"\n              />\n            </div>\n            <CodeMirrorPanel\n              className={styles.codeMirrorPanel}\n              code={this.state.minified}\n              options={this.options}\n              fileSize={this.state.minifiedSize}\n              theme='paraiso-dark'\n              placeholder=\"Terser output will be shown here\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  _updateCode = code => {\n    this.setState({\n      code,\n      rawSize: getCodeSizeInBytes(code)\n    });\n    this._minifyToState(code);\n  };\n\n  _updateTerserOptions = options => {\n    try {\n      const parsedOptions = evalOptions(options);\n\n      this.setState({\n        terserOptions: parsedOptions,\n        optionsErrorMessage: null\n      });\n    } catch (e) {\n      this.setState({ optionsErrorMessage: e.message });\n    }\n\n    this._minify(this.state.code);\n  };\n\n  _minifyToState = debounce(\n    code => this._minify(code, this._persistState),\n    DEBOUNCE_DELAY\n  );\n\n  _minify = (code, setStateCallback) => {\n    // we need to clone this because terser mutates the options object :(\n    const terserOpts = cloneDeep(this.state.terserOptions);\n\n    // TODO: put this in a worker to avoid blocking the UI on heavy content\n    try {\n      const result = terser.minify(code, terserOpts);\n\n      if (result.error) {\n        this.setState({ errorMessage: result.error.message });\n      } else {\n        this.setState({\n          minified: result.code,\n          minifiedSize: getCodeSizeInBytes(result.code),\n          errorMessage: null\n        });\n      }\n    } catch (e) {\n      this.setState({ errorMessage: e.message });\n    }\n  };\n}\n\nexport default Repl;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Repl from './Repl';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<Repl />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}